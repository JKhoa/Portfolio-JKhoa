// DOM Elements
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');
const chatbotToggle = document.getElementById('chatbotToggle');
const chatbotWindow = document.getElementById('chatbotWindow');
const closeChatbot = document.getElementById('closeChatbot');
const chatbotMessages = document.getElementById('chatbotMessages');
const chatbotInput = document.getElementById('chatbotInput');
const sendMessage = document.getElementById('sendMessage');
const backToTop = document.getElementById('backToTop');
const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeSettings = document.getElementById('closeSettings');
const saveSettings = document.getElementById('saveSettings');
const testAI = document.getElementById('testAI');
const groqApiKey = document.getElementById('groqApiKey');
const aiStatus = document.getElementById('aiStatus');
const userName = document.getElementById('userName');
const memoryInfo = document.getElementById('memoryInfo');
const conversationCount = document.getElementById('conversationCount');
const interestCount = document.getElementById('interestCount');
const clearMemory = document.getElementById('clearMemory');

// API Configuration - S·ª¨ D·ª§NG localStorage cho b·∫£o m·∫≠t
const USE_LOCALSTORAGE_API = true; // Lu√¥n d√πng localStorage thay v√¨ hardcode

// User Memory System - L∆∞u tr·ªØ th√≥i quen v√† s·ªü th√≠ch ng∆∞·ªùi d√πng
const USER_MEMORY_KEY = 'chatbot_user_memory';
const CONVERSATION_HISTORY_KEY = 'chatbot_conversation_history';

// Initialize user memory
function initializeUserMemory() {
    if (!localStorage.getItem(USER_MEMORY_KEY)) {
        const defaultMemory = {
            name: '',
            interests: [],
            preferences: {
                language: 'vietnamese',
                topics: [],
                communication_style: 'friendly'
            },
            personal_info: {
                age_range: '',
                profession: '',
                experience_level: ''
            },
            conversation_patterns: {
                frequent_questions: [],
                favorite_topics: [],
                last_interaction: new Date().toISOString()
            }
        };
        localStorage.setItem(USER_MEMORY_KEY, JSON.stringify(defaultMemory));
    }
}

// Get user memory
function getUserMemory() {
    const memory = localStorage.getItem(USER_MEMORY_KEY);
    return memory ? JSON.parse(memory) : null;
}

// Update user memory
function updateUserMemory(updates) {
    const currentMemory = getUserMemory();
    const updatedMemory = {...currentMemory, ...updates };
    updatedMemory.conversation_patterns.last_interaction = new Date().toISOString();
    localStorage.setItem(USER_MEMORY_KEY, JSON.stringify(updatedMemory));
}

// Analyze user message for personal info extraction
function analyzeUserMessage(message) {
    const memory = getUserMemory();
    const updates = {};

    // Ph√¢n t√≠ch t√™n
    const namePatterns = [
        /t√¥i l√† ([^,.\s]+)/i,
        /t√™n t√¥i l√† ([^,.\s]+)/i,
        /m√¨nh l√† ([^,.\s]+)/i,
        /t√¥i t√™n ([^,.\s]+)/i
    ];

    for (const pattern of namePatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            updates.name = match[1];
            break;
        }
    }

    // Ph√¢n t√≠ch s·ªü th√≠ch
    const interestKeywords = [
        'th√≠ch', 'y√™u th√≠ch', 'quan t√¢m', 'ƒëam m√™', 's·ªü th√≠ch',
        'computer vision', 'machine learning', 'AI', 'YOLO', 'deep learning',
        'programming', 'coding', 'python', 'javascript', 'web development'
    ];

    const newInterests = [];
    interestKeywords.forEach(keyword => {
        if (message.toLowerCase().includes(keyword.toLowerCase())) {
            newInterests.push(keyword);
        }
    });

    if (newInterests.length > 0) {
        updates.interests = [...new Set([...(memory.interests || []), ...newInterests])];
    }

    // Ph√¢n t√≠ch ngh·ªÅ nghi·ªáp
    const professionKeywords = [
        'sinh vi√™n', 'h·ªçc sinh', 'developer', 'l·∫≠p tr√¨nh vi√™n', 'k·ªπ s∆∞',
        'researcher', 'nghi√™n c·ª©u', 'gi√°o vi√™n', 'gi·∫£ng vi√™n'
    ];

    professionKeywords.forEach(profession => {
        if (message.toLowerCase().includes(profession)) {
            updates.personal_info = {
                ...memory.personal_info,
                profession: profession
            };
        }
    });

    // Ph√¢n t√≠ch y√™u c·∫ßu ng√¥n ng·ªØ
    if (message.toLowerCase().includes('english') || message.toLowerCase().includes('ti·∫øng anh')) {
        updates.preferences = {
            ...memory.preferences,
            language: 'english'
        };
    } else {
        updates.preferences = {
            ...memory.preferences,
            language: 'vietnamese'
        };
    }

    // L∆∞u c√¢u h·ªèi th∆∞·ªùng g·∫∑p
    const questions = memory.conversation_patterns ? .frequent_questions || [];
    questions.push({
        question: message,
        timestamp: new Date().toISOString(),
        context: 'user_question'
    });

    // Gi·ªØ ch·ªâ 10 c√¢u h·ªèi g·∫ßn nh·∫•t
    updates.conversation_patterns = {
        ...memory.conversation_patterns,
        frequent_questions: questions.slice(-10)
    };

    if (Object.keys(updates).length > 0) {
        updateUserMemory(updates);
    }
}

// Get conversation history
function getConversationHistory() {
    const history = localStorage.getItem(CONVERSATION_HISTORY_KEY);
    return history ? JSON.parse(history) : [];
}

// Save conversation
function saveConversation(userMessage, botResponse) {
    const history = getConversationHistory();
    const conversation = {
        timestamp: new Date().toISOString(),
        user: userMessage,
        bot: botResponse
    };

    history.push(conversation);

    // Gi·ªØ ch·ªâ 20 cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t
    const recentHistory = history.slice(-20);
    localStorage.setItem(CONVERSATION_HISTORY_KEY, JSON.stringify(recentHistory));
}

// Mobile Navigation
hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    });
});

// Chatbot Functionality
if (chatbotToggle && chatbotWindow) {
    chatbotToggle.addEventListener('click', () => {
        console.log('Chatbot toggle clicked!');
        chatbotWindow.classList.toggle('active');
    });
}

if (closeChatbot && chatbotWindow) {
    closeChatbot.addEventListener('click', () => {
        console.log('Close chatbot clicked!');
        chatbotWindow.classList.remove('active');
    });
}

// Settings Modal
if (settingsBtn && settingsModal) {
    settingsBtn.addEventListener('click', () => {
        settingsModal.classList.add('active');
        loadSettings();
    });
}

if (closeSettings && settingsModal) {
    closeSettings.addEventListener('click', () => {
        settingsModal.classList.remove('active');
    });
}

if (settingsModal) {
    settingsModal.addEventListener('click', (e) => {
        if (e.target === settingsModal) {
            settingsModal.classList.remove('active');
        }
    });
}

if (saveSettings && groqApiKey && aiStatus) {
    saveSettings.addEventListener('click', () => {
        const apiKey = groqApiKey.value.trim();
        if (apiKey) {
            localStorage.setItem('groq_api_key', apiKey);
            updateAIStatus('Groq AI (Th·ª±c)', 'connected');
            addMessage('‚úÖ API key ƒë√£ ƒë∆∞·ª£c l∆∞u! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng AI th·ª±c ngay b√¢y gi·ªù.', 'bot');
        } else {
            localStorage.removeItem('groq_api_key');
            updateAIStatus('AI M√¥ Ph·ªèng (Local)', 'local');
            addMessage('‚ÑπÔ∏è ƒê√£ chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô AI m√¥ ph·ªèng.', 'bot');
        }

        // Save user name
        if (userName && userName.value.trim()) {
            const userMemory = getUserMemory();
            updateUserMemory({ name: userName.value.trim() });
            addMessage(`‚úÖ ƒê√£ l∆∞u t√™n: ${userName.value.trim()}! T√¥i s·∫Ω nh·ªõ b·∫°n.`, 'bot');
        }

        settingsModal.classList.remove('active');
        loadUserMemoryToUI(); // Refresh memory display
    });
}

// Clear memory button
if (clearMemory) {
    clearMemory.addEventListener('click', () => {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô b·ªô nh·ªõ cu·ªôc tr√≤ chuy·ªán? ƒêi·ªÅu n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
            localStorage.removeItem(USER_MEMORY_KEY);
            localStorage.removeItem(CONVERSATION_HISTORY_KEY);
            initializeUserMemory();
            loadUserMemoryToUI();
            addMessage('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô b·ªô nh·ªõ. T√¥i s·∫Ω b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu!', 'bot');
        }
    });
}

if (testAI) {
    testAI.addEventListener('click', async() => {
        const testBtn = testAI;
        const originalText = testBtn.textContent;
        testBtn.textContent = 'ƒêang test...';
        testBtn.disabled = true;

        try {
            addMessage('üîç ƒêang test AI...', 'bot');
            // Simple test - just show that it works
            setTimeout(() => {
                addMessage('‚úÖ Test th√†nh c√¥ng! AI ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.', 'bot');
                testBtn.textContent = originalText;
                testBtn.disabled = false;
            }, 1000);
        } catch (error) {
            addMessage('‚ùå Test th·∫•t b·∫°i: ' + error.message, 'bot');
            testBtn.textContent = originalText;
            testBtn.disabled = false;
        }
    });
}

// Load and update AI status
function loadSettings() {
    if (groqApiKey && aiStatus) {
        const savedApiKey = localStorage.getItem('groq_api_key');
        if (savedApiKey) {
            groqApiKey.value = savedApiKey;
            updateAIStatus('Groq AI (Th·ª±c)', 'connected');
        } else {
            groqApiKey.value = '';
            updateAIStatus('AI M√¥ Ph·ªèng (Local)', 'local');
        }
    }

    // Load user memory data
    loadUserMemoryToUI();
}

// Load user memory to UI
function loadUserMemoryToUI() {
    const userMemory = getUserMemory();
    const conversationHistory = getConversationHistory();

    // Load user name
    if (userName && userMemory.name) {
        userName.value = userMemory.name;
    }

    // Update memory stats
    if (conversationCount) {
        conversationCount.textContent = `${conversationHistory.length} cu·ªôc tr√≤ chuy·ªán`;
    }

    if (interestCount) {
        const interests = userMemory.interests || [];
        interestCount.textContent = `${interests.length} s·ªü th√≠ch`;
    }
}

function updateAIStatus(text, type) {
    if (aiStatus) {
        const statusIndicator = aiStatus.querySelector('.status-indicator');
        const statusText = aiStatus.querySelector('.status-text');

        if (statusText) statusText.textContent = text;

        if (statusIndicator) {
            if (type === 'connected') {
                statusIndicator.style.background = '#4CAF50';
            } else {
                statusIndicator.style.background = 'var(--primary-color)';
            }
        }
    }
}

// AI response system
async function getAIResponse(message) {
    // Ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ c·∫≠p nh·∫≠t b·ªô nh·ªõ ng∆∞·ªùi d√πng
    analyzeUserMessage(message);

    const apiKey = localStorage.getItem('groq_api_key');
    const userMemory = getUserMemory();
    const conversationHistory = getConversationHistory().slice(-5); // 5 cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t

    if (apiKey) {
        try {
            // T·∫°o context t·ª´ b·ªô nh·ªõ ng∆∞·ªùi d√πng
            let systemPrompt = `B·∫°n l√† AI assistant th√¥ng minh cho YOLO project. 

QUAN TR·ªåNG - NG√îN NG·ªÆ:
- LU√îN LU√îN tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu r√µ r√†ng "answer in English" ho·∫∑c "tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh"
- N·∫øu user h·ªèi b·∫±ng ti·∫øng Anh nh∆∞ng KH√îNG y√™u c·∫ßu tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh, v·∫´n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh khi c√≥ y√™u c·∫ßu c·ª• th·ªÉ

TH√îNG TIN NG∆Ø·ªúI D√ôNG:`;

            if (userMemory.name) {
                systemPrompt += `\n- T√™n: ${userMemory.name}`;
            }

            if (userMemory.interests && userMemory.interests.length > 0) {
                systemPrompt += `\n- S·ªü th√≠ch: ${userMemory.interests.join(', ')}`;
            }

            if (userMemory.personal_info ? .profession) {
                systemPrompt += `\n- Ngh·ªÅ nghi·ªáp: ${userMemory.personal_info.profession}`;
            }

            systemPrompt += `\n\nH√ÉY:
- S·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p
- Th√¢n thi·ªán v√† c√° nh√¢n h√≥a
- Chuy√™n v·ªÅ computer vision, machine learning, YOLO object detection
- Nh·ªõ c√°c cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu r√µ r√†ng kh√°c`;

            // Th√™m l·ªãch s·ª≠ tr√≤ chuy·ªán v√†o context
            const messages = [{ role: 'system', content: systemPrompt }];

            // Th√™m 3 cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t ƒë·ªÉ AI nh·ªõ context
            conversationHistory.slice(-3).forEach(conv => {
                messages.push({ role: 'user', content: conv.user });
                messages.push({ role: 'assistant', content: conv.bot });
            });

            // Th√™m tin nh·∫Øn hi·ªán t·∫°i
            messages.push({ role: 'user', content: message });

            const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'llama3-8b-8192',
                    messages: messages,
                    max_tokens: 512,
                    temperature: 0.7
                })
            });

            if (response.ok) {
                const data = await response.json();
                const botResponse = data.choices[0].message.content;

                // L∆∞u cu·ªôc tr√≤ chuy·ªán
                saveConversation(message, botResponse);

                return botResponse;
            } else {
                console.log('Groq API error:', response.status);
            }
        } catch (error) {
            console.log('Groq API failed:', error);
        }
    }

    // Fallback to intelligent simulated responses using user memory
    return getIntelligentFallbackResponse(message);
}

// Intelligent fallback response system
function getIntelligentFallbackResponse(message) {
    const userMemory = getUserMemory();
    const conversationHistory = getConversationHistory();

    // T·∫°o ph·∫£n h·ªìi th√¥ng minh d·ª±a tr√™n b·ªô nh·ªõ
    let response = "";

    // C√° nh√¢n h√≥a ph·∫£n h·ªìi n·∫øu c√≥ t√™n
    const greeting = userMemory.name ? `${userMemory.name}, ` : "";

    // Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ ƒë∆∞a ra ph·∫£n h·ªìi ph√π h·ª£p
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('yolo') || lowerMessage.includes('object detection')) {
        response = `${greeting}YOLO (You Only Look Once) l√† m·ªôt thu·∫≠t to√°n nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng th·ªùi gian th·ª±c r·∫•t m·∫°nh m·∫Ω! `;
        if (userMemory.personal_info ? .profession === 'sinh vi√™n') {
            response += "ƒê√¢y l√† ch·ªß ƒë·ªÅ r·∫•t th√∫ v·ªã cho nghi√™n c·ª©u h·ªçc t·∫≠p c·ªßa b·∫°n. ";
        }
        response += "ƒê√¢y l√† AI demo - h√£y th√™m API key trong Settings ‚öôÔ∏è ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi chi ti·∫øt h∆°n!";
    } else if (lowerMessage.includes('machine learning') || lowerMessage.includes('ai')) {
        response = `${greeting}Machine Learning v√† AI l√† lƒ©nh v·ª±c r·∫•t h·∫•p d·∫´n! `;
        if (userMemory.interests && userMemory.interests.includes('machine learning')) {
            response += "T√¥i nh·ªõ b·∫°n c√≥ quan t√¢m ƒë·∫øn ML r·ªìi. ";
        }
        response += "ƒê·ªÉ c√≥ tr·∫£i nghi·ªám AI th·ª±c, h√£y c·∫•u h√¨nh API key trong Settings!";
    } else if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
        response = `Xin ch√†o ${userMemory.name || 'b·∫°n'}! `;
        if (conversationHistory.length > 0) {
            response += "Vui l√≤ng g·∫∑p l·∫°i b·∫°n! ";
        }
        response += "T√¥i ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô demo. V√†o Settings ‚öôÔ∏è ƒë·ªÉ k·∫øt n·ªëi AI th·ª±c nh√©!";
    } else if (lowerMessage.includes('t√™n') && lowerMessage.includes('g√¨')) {
        response = `T√¥i l√† AI Assistant cho YOLO project! `;
        if (userMemory.name) {
            response += `C√≤n b·∫°n l√† ${userMemory.name} ƒë√∫ng kh√¥ng? `;
        }
        response += "ƒê√¢y l√† phi√™n b·∫£n demo - th√™m API key ƒë·ªÉ c√≥ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß!";
    } else if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thank')) {
        response = `${greeting}R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! `;
        if (userMemory.interests && userMemory.interests.length > 0) {
            response += `Hy v·ªçng th√¥ng tin v·ªÅ ${userMemory.interests[0]} h·ªØu √≠ch v·ªõi b·∫°n. `;
        }
        response += "ƒê√¢y l√† AI demo - Settings ‚öôÔ∏è ƒë·ªÉ tr·∫£i nghi·ªám AI th·ª±c!";
    } else {
        // Ph·∫£n h·ªìi chung th√¥ng minh
        const responses = [
            `${greeting}ƒê√¢y l√† ph·∫£n h·ªìi t·ª´ AI m√¥ ph·ªèng v·ªÅ: "${message}". H√£y m·ªü Settings ‚öôÔ∏è ƒë·ªÉ th√™m API key v√† c√≥ c√¢u tr·∫£ l·ªùi chi ti·∫øt!`,
            `${greeting}T√¥i hi·ªÉu b·∫°n quan t√¢m ƒë·∫øn ƒëi·ªÅu n√†y. ƒê√¢y l√† AI demo - c·∫•u h√¨nh API key ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n!`,
            `${greeting}C√¢u h·ªèi th√∫ v·ªã! ƒê·ªÉ c√≥ ph·∫£n h·ªìi chuy√™n s√¢u, h√£y th√™m API key trong Settings.`,
            `${greeting}R·∫•t vui ƒë∆∞·ª£c trao ƒë·ªïi v·ªõi b·∫°n! ƒê√¢y l√† ch·∫ø ƒë·ªô demo - Settings ‚öôÔ∏è ƒë·ªÉ k·∫øt n·ªëi AI th·ª±c.`
        ];

        response = responses[Math.floor(Math.random() * responses.length)];
    }

    // L∆∞u cu·ªôc tr√≤ chuy·ªán
    saveConversation(message, response);

    return response;
}

// Initialize chatbot
function initializeChatbot() {
    // Kh·ªüi t·∫°o b·ªô nh·ªõ ng∆∞·ªùi d√πng
    initializeUserMemory();

    if (typeof loadSettings === 'function') {
        loadSettings();
    }

    // Th√™m th√¥ng b√°o ch√†o m·ª´ng c√° nh√¢n h√≥a
    setTimeout(() => {
        const savedApiKey = localStorage.getItem('groq_api_key');
        const userMemory = getUserMemory();
        let welcomeMessage;

        const greeting = userMemory.name ? `Ch√†o ${userMemory.name}! ` : "ü§ñ Xin ch√†o! ";

        if (savedApiKey) {
            welcomeMessage = `${greeting}T√¥i l√† AI Assistant v·ªõi Groq API. `;
            if (userMemory.interests && userMemory.interests.length > 0) {
                welcomeMessage += `T√¥i nh·ªõ b·∫°n quan t√¢m ƒë·∫øn ${userMemory.interests.slice(0, 2).join(' v√† ')}. `;
            }
            welcomeMessage += "H√£y h·ªèi t√¥i b·∫•t k·ª≥ ƒëi·ªÅu g√¨!";
        } else {
            welcomeMessage = `${greeting}T√¥i ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô demo. `;
            if (getConversationHistory().length > 0) {
                welcomeMessage += "Vui l√≤ng g·∫∑p l·∫°i b·∫°n! ";
            }
            welcomeMessage += "ƒê·ªÉ c√≥ tr·∫£i nghi·ªám AI th·ª±c, h√£y th√™m API key trong Settings ‚öôÔ∏è";
        }

        if (chatbotMessages) {
            addMessage(welcomeMessage, 'bot');
        }
    }, 500);
}

// Initialize AI status on page load
document.addEventListener('DOMContentLoaded', () => {
    initializeChatbot();
});

// Simple chatbot responses
const chatbotResponses = {
    'yolo': 'YOLO (You Only Look Once) l√† m·ªôt thu·∫≠t to√°n nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng th·ªùi gian th·ª±c ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Joseph Redmon. N√≥ c√≥ th·ªÉ ph√°t hi·ªán v√† ph√¢n lo·∫°i nhi·ªÅu ƒë·ªëi t∆∞·ª£ng trong m·ªôt h√¨nh ·∫£nh ch·ªâ v·ªõi m·ªôt l·∫ßn nh√¨n.',
    'cnn': 'CNN (Convolutional Neural Network) l√† ki·∫øn tr√∫c m·∫°ng n∆°-ron chuy√™n bi·ªát cho x·ª≠ l√Ω d·ªØ li·ªáu c√≥ c·∫•u tr√∫c l∆∞·ªõi nh∆∞ h√¨nh ·∫£nh. N√≥ s·ª≠ d·ª•ng c√°c l·ªõp t√≠ch ch·∫≠p ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng.',
    'nh·∫≠n di·ªán': 'Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng l√† qu√° tr√¨nh x√°c ƒë·ªãnh v√† ƒë·ªãnh v·ªã c√°c ƒë·ªëi t∆∞·ª£ng trong h√¨nh ·∫£nh ho·∫∑c video. C√°c thu·∫≠t to√°n ph·ªï bi·∫øn bao g·ªìm R-CNN, SSD, v√† YOLO.',
    'ng·ªß g·∫≠t': 'Ph√°t hi·ªán ng·ªß g·∫≠t l√† ·ª©ng d·ª•ng c·ªßa computer vision ƒë·ªÉ nh·∫≠n di·ªán tr·∫°ng th√°i m·ªát m·ªèi c·ªßa sinh vi√™n trong l·ªõp h·ªçc, gi√∫p c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng h·ªçc t·∫≠p.',
    'hu·∫•n luy·ªán': 'Qu√° tr√¨nh hu·∫•n luy·ªán YOLO bao g·ªìm: thu th·∫≠p d·ªØ li·ªáu, g√°n nh√£n, ti·ªÅn x·ª≠ l√Ω, hu·∫•n luy·ªán m√¥ h√¨nh v√† ƒë√°nh gi√° hi·ªáu su·∫•t.',
    'mAP': 'mAP (Mean Average Precision) l√† ch·ªâ s·ªë ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng. Gi√° tr·ªã c√†ng cao c√†ng t·ªët.',
    'precision': 'Precision (ƒê·ªô ch√≠nh x√°c) ƒëo l∆∞·ªùng t·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng trong t·ªïng s·ªë d·ª± ƒëo√°n d∆∞∆°ng t√≠nh.',
    'recall': 'Recall (ƒê·ªô bao ph·ªß) ƒëo l∆∞·ªùng t·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng trong t·ªïng s·ªë tr∆∞·ªùng h·ª£p th·ª±c t·∫ø d∆∞∆°ng t√≠nh.',
    'khoa': 'T√¥i l√† Nguy·ªÖn Ho√†ng Anh Khoa, sinh vi√™n nƒÉm cu·ªëi ng√†nh C√¥ng ngh·ªá th√¥ng tin t·∫°i ƒê·∫°i h·ªçc ƒê√† L·∫°t. ƒê√¢y l√† d·ª± √°n nghi√™n c·ª©u v·ªÅ YOLO c·ªßa t√¥i.',
    'portfolio': 'B·∫°n c√≥ th·ªÉ xem th√™m c√°c d·ª± √°n kh√°c c·ªßa t√¥i t·∫°i trang Portfolio ch√≠nh.',
    'li√™n h·ªá': 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi t√¥i qua email: nhakhoa1004@gmail.com ho·∫∑c s·ªë ƒëi·ªán tho·∫°i: 0395123864'
};

// Send message function
async function sendChatbotMessage() {
    const message = chatbotInput.value.trim();
    if (message === '') return;

    // Add user message
    addMessage(message, 'user');
    chatbotInput.value = '';

    // Show typing indicator
    addMessage('ü§ñ ƒêang suy nghƒ©...', 'bot');

    try {
        // Get AI response
        const response = await getAIResponse(message);

        // Remove typing indicator
        const messages = chatbotMessages.children;
        if (messages.length > 0 && messages[messages.length - 1].textContent.includes('ƒêang suy nghƒ©')) {
            chatbotMessages.removeChild(messages[messages.length - 1]);
        }

        addMessage(response, 'bot');
    } catch (error) {
        // Remove typing indicator and show error
        const messages = chatbotMessages.children;
        if (messages.length > 0 && messages[messages.length - 1].textContent.includes('ƒêang suy nghƒ©')) {
            chatbotMessages.removeChild(messages[messages.length - 1]);
        }

        addMessage('‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!', 'bot');
    }
}

// Add message to chat
function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;

    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = text;

    messageDiv.appendChild(contentDiv);
    chatbotMessages.appendChild(messageDiv);

    // Scroll to bottom
    chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
}

// Get chatbot response
function getChatbotResponse(message) {
    const lowerMessage = message.toLowerCase();

    for (const [keyword, response] of Object.entries(chatbotResponses)) {
        if (lowerMessage.includes(keyword)) {
            return response;
        }
    }

    return 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ YOLO, CNN, nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng, ng·ªß g·∫≠t, hu·∫•n luy·ªán, mAP, precision, recall, ho·∫∑c li√™n h·ªá v·ªõi t√°c gi·∫£.';
}

// Event listeners for chatbot
if (sendMessage && chatbotInput) {
    sendMessage.addEventListener('click', sendChatbotMessage);
    chatbotInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendChatbotMessage();
        }
    });
}

// Back to Top functionality
if (backToTop) {
    window.addEventListener('scroll', () => {
        if (window.pageYOffset > 300) {
            backToTop.classList.add('show');
        } else {
            backToTop.classList.remove('show');
        }
    });

    backToTop.addEventListener('click', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Navbar scroll effect
window.addEventListener('scroll', () => {
    const navbar = document.querySelector('.navbar');
    if (navbar) {
        if (window.scrollY > 100) {
            navbar.style.background = 'rgba(0, 0, 0, 0.95)';
        } else {
            navbar.style.background = 'rgba(0, 0, 0, 0.9)';
        }
    }
});

// Intersection Observer for animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('fade-in-up');
        }
    });
}, observerOptions);

// Observe elements for animation
document.addEventListener('DOMContentLoaded', () => {
    const animateElements = document.querySelectorAll('.theory-card, .timeline-item, .step, .metric-card');
    animateElements.forEach(el => observer.observe(el));
});

// Counter animation for metrics
function animateCounter(element, target, duration = 2000) {
    let start = 0;
    const increment = target / (duration / 16);

    const timer = setInterval(() => {
        start += increment;
        if (start >= target) {
            element.textContent = target;
            clearInterval(timer);
        } else {
            element.textContent = Math.floor(start);
        }
    }, 16);
}

// Animate metrics when they come into view
const metricsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const metricValue = entry.target.querySelector('.metric-value');
            if (metricValue) {
                const text = metricValue.textContent;
                const number = parseFloat(text);

                if (!isNaN(number)) {
                    animateCounter(metricValue, number);
                }
            }
            metricsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

document.addEventListener('DOMContentLoaded', () => {
    const metricCards = document.querySelectorAll('.metric-card');
    metricCards.forEach(card => metricsObserver.observe(card));
});

// Parallax effect for hero section
window.addEventListener('scroll', () => {
    const scrolled = window.pageYOffset;
    const hero = document.querySelector('.hero');
    if (hero) {
        const rate = scrolled * -0.5;
        hero.style.transform = `translateY(${rate}px)`;
    }
});

// Loading animation
window.addEventListener('load', () => {
    document.body.classList.add('loaded');
});

// Add some interactive features
document.addEventListener('DOMContentLoaded', () => {
    // Add hover effects to cards
    const cards = document.querySelectorAll('.theory-card, .timeline-item, .metric-card');
    cards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.style.transform = 'translateY(-10px) scale(1.02)';
        });

        card.addEventListener('mouseleave', () => {
            card.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Add click effects to buttons
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
        button.addEventListener('click', function(e) {
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            ripple.classList.add('ripple');

            this.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });
});

// Add ripple effect CSS dynamically
const style = document.createElement('style');
style.textContent = `
    .btn {
        position: relative;
        overflow: hidden;
    }
    
    .ripple {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        transform: scale(0);
        animation: ripple-animation 0.6s linear;
        pointer-events: none;
    }
    
    @keyframes ripple-animation {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Debug: Check if elements exist
console.log('Chatbot elements check:');
console.log('chatbotToggle:', chatbotToggle);
console.log('chatbotWindow:', chatbotWindow);
console.log('closeChatbot:', closeChatbot);

// ===========================
// LIVE DEMO: Drowsiness Detection
// ===========================

class DrowsinessDetector {
    constructor() {
        // DOM Elements
        this.webcam = document.getElementById('webcam');
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas ? this.canvas.getContext('2d') : null;
        this.detectionOverlay = document.getElementById('detectionOverlay');
        this.statusIndicator = document.getElementById('statusIndicator');
        this.startDemo = document.getElementById('startDemo');
        this.stopDemo = document.getElementById('stopDemo');
        this.capturePhoto = document.getElementById('capturePhoto');
        this.viewGallery = document.getElementById('viewGallery');
        this.resetDemo = document.getElementById('resetDemo');
        this.testCamera = document.getElementById('testCamera');

        // Status elements
        this.detectionStatus = document.getElementById('detectionStatus');
        this.confidence = document.getElementById('confidence');
        this.fps = document.getElementById('fps');
        this.historyList = document.getElementById('historyList');

        // Settings
        this.sensitivity = document.getElementById('sensitivity');
        this.sensitivityValue = document.getElementById('sensitivityValue');
        this.alertMode = document.getElementById('alertMode');

        // Detection state
        this.isRunning = false;
        this.stream = null;
        this.lastDetectionTime = 0;
        this.frameCount = 0;
        this.fpsStartTime = Date.now();
        this.detectionHistory = [];

        // Face detection parameters
        this.eyeClosedFrames = 0;
        this.headDownFrames = 0;
        this.alertThreshold = 15; // frames

        // Database for storing captured images
        this.imageDatabase = [];
        this.DATABASE_KEY = 'drowsiness_detection_images';

        // Auto-capture settings
        this.autoCapture = true;
        this.lastCaptureTime = 0;
        this.captureInterval = 3000; // 3 seconds between captures

        console.log('DrowsinessDetector initialized');
        console.log('Elements check:', {
            webcam: !!this.webcam,
            canvas: !!this.canvas,
            startDemo: !!this.startDemo,
            stopDemo: !!this.stopDemo,
            capturePhoto: !!this.capturePhoto,
            testCamera: !!this.testCamera
        });

        // Check browser compatibility
        console.log('Browser compatibility:', {
            getUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
            webRTC: !!(window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection),
            canvas: !!document.createElement('canvas').getContext,
            video: !!document.createElement('video').canPlayType
        });

        this.initializeEvents();
        this.initializeDetection();
        this.loadDatabase();
    }

    initializeEvents() {
        console.log('Initializing events...');

        if (this.startDemo) {
            console.log('Adding startDemo listener');
            this.startDemo.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Start demo clicked');
                this.startDetection();
            });
        } else {
            console.error('startDemo element not found');
        }

        if (this.stopDemo) {
            this.stopDemo.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Stop demo clicked');
                this.stopDetection();
            });
        }

        if (this.capturePhoto) {
            this.capturePhoto.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Capture photo clicked');
                this.capturePhoto();
            });
        }

        if (this.viewGallery) {
            this.viewGallery.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('View gallery clicked');
                this.showImageGallery();
            });
        }

        if (this.testCamera) {
            this.testCamera.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Test camera clicked');
                this.testCameraAccess();
            });
        }

        if (this.resetDemo) {
            this.resetDemo.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Reset demo clicked');
                this.resetDetection();
            });
        }

        if (this.sensitivity) {
            this.sensitivity.addEventListener('input', (e) => {
                if (this.sensitivityValue) {
                    this.sensitivityValue.textContent = e.target.value;
                }
            });
        }
    }

    // Database management methods
    loadDatabase() {
        try {
            const stored = localStorage.getItem(this.DATABASE_KEY);
            this.imageDatabase = stored ? JSON.parse(stored) : [];
            console.log(`Loaded ${this.imageDatabase.length} images from database`);
            this.updateImageGallery();
        } catch (error) {
            console.error('Error loading database:', error);
            this.imageDatabase = [];
        }
    }

    saveToDatabase(imageData, detectionInfo) {
        const record = {
            id: Date.now(),
            timestamp: new Date().toISOString(),
            image: imageData,
            detection: {
                status: detectionInfo.status,
                confidence: detectionInfo.confidence,
                eyeClosedFrames: detectionInfo.eyeClosedFrames,
                headDownFrames: detectionInfo.headDownFrames
            },
            formatted_time: new Date().toLocaleString('vi-VN')
        };

        this.imageDatabase.unshift(record); // Add to beginning

        // Keep only last 50 images to avoid storage overflow
        if (this.imageDatabase.length > 50) {
            this.imageDatabase = this.imageDatabase.slice(0, 50);
        }

        try {
            localStorage.setItem(this.DATABASE_KEY, JSON.stringify(this.imageDatabase));
            console.log('Saved detection to database:', record.formatted_time);
            this.updateImageGallery();
            this.showCaptureNotification(record);
        } catch (error) {
            console.error('Error saving to database:', error);
            if (error.name === 'QuotaExceededError') {
                // Storage full, remove old entries
                this.imageDatabase = this.imageDatabase.slice(0, 20);
                localStorage.setItem(this.DATABASE_KEY, JSON.stringify(this.imageDatabase));
            }
        }
    }

    clearDatabase() {
        this.imageDatabase = [];
        localStorage.removeItem(this.DATABASE_KEY);
        this.updateImageGallery();
        console.log('Database cleared');
    }

    exportDatabase() {
        const dataStr = JSON.stringify(this.imageDatabase, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `drowsiness_detection_data_${new Date().toISOString().slice(0,10)}.json`;
        link.click();
        URL.revokeObjectURL(url);
    }

    initializeDetection() {
        // Kh·ªüi t·∫°o face detection (s·ª≠ d·ª•ng m·ªôt thu·∫≠t to√°n ƒë∆°n gi·∫£n)
        this.updateStatus('S·∫µn s√†ng b·∫Øt ƒë·∫ßu', false);
    }

    async testCameraAccess() {
        try {
            console.log('Testing camera access...');
            this.updateStatus('ƒêang ki·ªÉm tra camera...', false);

            // Check if getUserMedia is supported
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                throw new Error('getUserMedia not supported');
            }

            // Test basic camera access
            const stream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: 'user' },
                audio: false
            });

            console.log('Camera test successful');
            this.showNotification('‚úÖ Camera ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu demo.', 'success');
            this.updateStatus('Camera ƒë√£ s·∫µn s√†ng', false);

            // Stop test stream
            stream.getTracks().forEach(track => track.stop());

            // Also test video element
            if (this.webcam) {
                this.showNotification('üìπ Video element ƒë√£ s·∫µn s√†ng', 'info');
            } else {
                this.showNotification('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video element', 'warning');
            }

        } catch (error) {
            console.error('Camera test failed:', error);
            let errorMessage = 'Camera test failed';

            if (error.name === 'NotAllowedError') {
                errorMessage = '‚ùå Quy·ªÅn truy c·∫≠p camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng cho ph√©p trong browser settings.';
            } else if (error.name === 'NotFoundError') {
                errorMessage = '‚ùå Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng k·∫øt n·ªëi camera v√† th·ª≠ l·∫°i.';
            } else if (error.name === 'NotReadableError') {
                errorMessage = '‚ùå Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.';
            } else if (error.message.includes('getUserMedia not supported')) {
                errorMessage = '‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ camera. Vui l√≤ng d√πng Chrome, Firefox, ho·∫∑c Edge.';
            } else {
                errorMessage = `‚ùå L·ªói camera: ${error.message}`;
            }

            this.updateStatus('L·ªói camera', false);
            this.showNotification(errorMessage, 'error');
        }
    }

    async startDetection() {
        try {
            console.log('Starting detection...');

            // Check if getUserMedia is supported
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                throw new Error('getUserMedia not supported in this browser');
            }

            // Show camera permission request
            this.updateStatus('ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera...', false);

            // Request camera access with error handling
            const constraints = {
                video: {
                    width: { ideal: 640, max: 1280 },
                    height: { ideal: 480, max: 720 },
                    facingMode: 'user'
                },
                audio: false
            };

            console.log('Requesting camera access with constraints:', constraints);
            this.stream = await navigator.mediaDevices.getUserMedia(constraints);
            console.log('Camera access granted, stream:', this.stream);

            if (!this.webcam) {
                throw new Error('Webcam element not found');
            }

            // Set up video element
            this.webcam.srcObject = this.stream;
            this.webcam.muted = true;
            this.webcam.playsInline = true;

            // Wait for video to be ready
            await new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error('Video loading timeout'));
                }, 10000);

                this.webcam.onloadedmetadata = () => {
                    clearTimeout(timeout);
                    console.log('Video metadata loaded, dimensions:', this.webcam.videoWidth, 'x', this.webcam.videoHeight);
                    
                    this.webcam.play()
                        .then(() => {
                            console.log('Video playing successfully');
                            resolve();
                        })
                        .catch(reject);
                };

                this.webcam.onerror = (error) => {
                    clearTimeout(timeout);
                    reject(error);
                };
            });

            // Setup canvas
            if (this.canvas && this.webcam) {
                this.canvas.width = this.webcam.videoWidth || 640;
                this.canvas.height = this.webcam.videoHeight || 480;
                console.log('Canvas setup:', this.canvas.width, 'x', this.canvas.height);
            }

            this.isRunning = true;
            this.updateStatus('‚úÖ ƒêang ph√°t hi·ªán...', true);
            this.toggleButtons(true);

            // Show success notification
            this.showNotification('üé• Camera ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng! B·∫Øt ƒë·∫ßu ph√°t hi·ªán ng·ªß g·∫≠t...', 'success');

            // Start detection loop
            this.detectionLoop();

        } catch (error) {
            console.error('Error starting detection:', error);
            let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';

            if (error.name === 'NotAllowedError') {
                errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera. Vui l√≤ng cho ph√©p v√† th·ª≠ l·∫°i.';
            } else if (error.name === 'NotFoundError') {
                errorMessage = 'Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi camera.';
            } else if (error.name === 'NotReadableError') {
                errorMessage = 'Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.';
            } else if (error.name === 'OverconstrainedError') {
                errorMessage = 'Camera kh√¥ng h·ªó tr·ª£ ƒë·ªô ph√¢n gi·∫£i y√™u c·∫ßu.';
            } else if (error.message.includes('getUserMedia not supported')) {
                errorMessage = 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ truy c·∫≠p camera. Vui l√≤ng s·ª≠ d·ª•ng Chrome, Firefox ho·∫∑c Edge.';
            } else if (error.message.includes('timeout')) {
                errorMessage = 'Qu√° th·ªùi gian ch·ªù k·∫øt n·ªëi camera. Vui l√≤ng th·ª≠ l·∫°i.';
            } else {
                errorMessage = `L·ªói truy c·∫≠p camera: ${error.message}`;
            }

            this.updateStatus('‚ùå ' + errorMessage, false);
            this.showNotification(errorMessage, 'error');
            
            // Clean up on error
            if (this.stream) {
                this.stream.getTracks().forEach(track => track.stop());
                this.stream = null;
            }
        }
    }

    stopDetection() {
        this.isRunning = false;

        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop());
        }

        this.updateStatus('ƒê√£ d·ª´ng', false);
        this.toggleButtons(false);
        this.clearOverlay();
    }

    resetDetection() {
        this.stopDetection();
        this.detectionHistory = [];
        this.eyeClosedFrames = 0;
        this.headDownFrames = 0;
        this.updateHistoryDisplay();
        this.updateDetectionStats('ƒê√£ reset', 0);
    }

    detectionLoop() {
        if (!this.isRunning) return;

        this.frameCount++;
        this.updateFPS();

        // Simulate face detection (thay th·∫ø b·∫±ng AI model th·ª±c)
        this.simulateDetection();

        // Continue loop
        requestAnimationFrame(() => this.detectionLoop());
    }

    simulateDetection() {
        // M√¥ ph·ªèng ph√°t hi·ªán khu√¥n m·∫∑t v√† tr·∫°ng th√°i ng·ªß g·∫≠t
        const currentTime = Date.now();

        // Random simulation cho demo
        const hasFace = Math.random() > 0.1; // 90% c√≥ m·∫∑t

        if (hasFace) {
            const eyesClosed = Math.random() > 0.85; // 15% nh·∫Øm m·∫Øt
            const headDown = Math.random() > 0.9; // 10% c√∫i ƒë·∫ßu

            // Update counters
            if (eyesClosed) {
                this.eyeClosedFrames++;
            } else {
                this.eyeClosedFrames = 0;
            }

            if (headDown) {
                this.headDownFrames++;
            } else {
                this.headDownFrames = 0;
            }

            // Determine status
            let status = 'T·ªânh t√°o';
            let confidence = 95;
            let alertLevel = 'normal';

            if (this.eyeClosedFrames > this.alertThreshold) {
                status = 'Ng·ªß g·∫≠t';
                confidence = Math.min(95, 60 + this.eyeClosedFrames * 2);
                alertLevel = 'sleeping';
            } else if (this.eyeClosedFrames > 5 || this.headDownFrames > 8) {
                status = 'Bu·ªìn ng·ªß';
                confidence = Math.min(85, 50 + Math.max(this.eyeClosedFrames, this.headDownFrames) * 3);
                alertLevel = 'drowsy';
            }

            this.updateDetectionStats(status, confidence);
            this.drawDetectionBox(alertLevel, confidence);

            // Add to history if significant
            if (alertLevel !== 'normal') {
                this.addToHistory(status, confidence);
            }

            // Alert if needed
            if (alertLevel === 'sleeping' && this.alertMode.value !== 'visual') {
                this.triggerAlert();
            }

            // Auto capture image when drowsiness detected
            if (alertLevel === 'sleeping' && this.autoCapture) {
                this.captureAndSaveImage(new Date(), status, confidence);
            }

        } else {
            this.updateDetectionStats('Kh√¥ng ph√°t hi·ªán m·∫∑t', 0);
            this.clearOverlay();
        }
    }

    drawDetectionBox(alertLevel, confidence) {
        if (!this.detectionOverlay) return;

        // Clear previous
        this.detectionOverlay.innerHTML = '';

        // Simulate face box position
        const box = document.createElement('div');
        box.className = `detection-box ${alertLevel}`;

        // Random position for demo
        const x = 100 + Math.random() * 200;
        const y = 50 + Math.random() * 150;
        const width = 150 + Math.random() * 50;
        const height = 180 + Math.random() * 40;

        box.style.left = x + 'px';
        box.style.top = y + 'px';
        box.style.width = width + 'px';
        box.style.height = height + 'px';

        // Add label
        const label = document.createElement('div');
        label.className = 'detection-label';
        label.textContent = `${alertLevel.toUpperCase()} (${confidence}%)`;
        box.appendChild(label);

        this.detectionOverlay.appendChild(box);
    }

    clearOverlay() {
        if (this.detectionOverlay) {
            this.detectionOverlay.innerHTML = '';
        }
    }

    updateStatus(text, isActive) {
        if (this.statusIndicator) {
            const statusText = this.statusIndicator.querySelector('.status-text');
            if (statusText) {
                statusText.textContent = text;
            }

            this.statusIndicator.className = 'status-indicator';
            if (isActive) {
                this.statusIndicator.classList.add('active');
            }
        }
    }

    updateDetectionStats(status, confidence) {
        if (this.detectionStatus) {
            this.detectionStatus.textContent = status;
        }

        if (this.confidence) {
            this.confidence.textContent = confidence + '%';
        }
    }

    updateFPS() {
        const now = Date.now();
        if (now - this.fpsStartTime >= 1000) {
            const currentFPS = Math.round(this.frameCount * 1000 / (now - this.fpsStartTime));
            if (this.fps) {
                this.fps.textContent = currentFPS;
            }
            this.frameCount = 0;
            this.fpsStartTime = now;
        }
    }

    addToHistory(status, confidence) {
        const timestamp = new Date().toLocaleTimeString();
        const historyItem = {
            time: timestamp,
            status: status,
            confidence: confidence
        };

        this.detectionHistory.unshift(historyItem);

        // Keep only last 10 items
        if (this.detectionHistory.length > 10) {
            this.detectionHistory.pop();
        }

        this.updateHistoryDisplay();
    }

    updateHistoryDisplay() {
        if (!this.historyList) return;

        if (this.detectionHistory.length === 0) {
            this.historyList.innerHTML = '<p class="no-history">Ch∆∞a c√≥ d·ªØ li·ªáu ph√°t hi·ªán</p>';
            return;
        }

        const historyHTML = this.detectionHistory.map(item =>
            `<div class="history-item">
                ${item.time} - ${item.status} (${item.confidence}%)
            </div>`
        ).join('');

        this.historyList.innerHTML = historyHTML;
    }

    toggleButtons(isRunning) {
        if (this.startDemo) {
            this.startDemo.style.display = isRunning ? 'none' : 'block';
        }
        if (this.stopDemo) {
            this.stopDemo.style.display = isRunning ? 'block' : 'none';
        }
    }

    capturePhoto() {
        if (!this.isRunning || !this.webcam || !this.canvas) {
            this.showNotification('‚ùå Demo ch∆∞a ch·∫°y ho·∫∑c camera ch∆∞a s·∫µn s√†ng', 'error');
            return;
        }

        try {
            // Manual capture with current status
            const currentTime = new Date();
            const currentStatus = this.detectionStatus ? this.detectionStatus.textContent : 'Ch·ª•p th·ªß c√¥ng';
            const currentConfidence = this.confidence ? parseInt(this.confidence.textContent) : 0;

            this.captureAndSaveImage(currentTime, currentStatus, currentConfidence);

        } catch (error) {
            console.error('Error in manual capture:', error);
            this.showNotification('‚ùå L·ªói khi ch·ª•p ·∫£nh', 'error');
        }
    }

    // Image capture and database methods
    captureAndSaveImage(timestamp, status = 'Ng·ªß g·∫≠t', confidence = 0) {
        if (!this.webcam || !this.canvas) {
            console.error('Camera or canvas not available for capture');
            return;
        }

        try {
            const captureCanvas = document.createElement('canvas');
            const ctx = captureCanvas.getContext('2d');

            // Set canvas size to match video
            captureCanvas.width = this.webcam.videoWidth || 640;
            captureCanvas.height = this.webcam.videoHeight || 480;

            // Draw current video frame
            ctx.drawImage(this.webcam, 0, 0, captureCanvas.width, captureCanvas.height);

            // Convert to base64 image
            const imageData = captureCanvas.toDataURL('image/jpeg', 0.8);

            // Create image record
            const imageRecord = {
                id: Date.now().toString(),
                timestamp: timestamp.toISOString(),
                timeString: timestamp.toLocaleString('vi-VN'),
                status: status,
                confidence: confidence,
                imageData: imageData,
                size: Math.round(imageData.length * 0.75) // Approximate size in bytes
            };

            // Save to database
            this.saveToDatabase(imageRecord);

            // Show notification
            this.showNotification(`üì∏ ƒê√£ ch·ª•p ·∫£nh t·ª± ƒë·ªông l√∫c ${imageRecord.timeString}`, 'info');

            console.log('Image captured and saved:', imageRecord.id);

        } catch (error) {
            console.error('Error capturing image:', error);
            this.showNotification('‚ùå L·ªói khi ch·ª•p ·∫£nh t·ª± ƒë·ªông', 'error');
        }
    }

    loadDatabase() {
        try {
            const saved = localStorage.getItem(this.DATABASE_KEY);
            return saved ? JSON.parse(saved) : [];
        } catch (error) {
            console.error('Error loading database:', error);
            return [];
        }
    }

    saveToDatabase(imageRecord) {
        try {
            let database = this.loadDatabase();
            database.push(imageRecord);

            // Keep only last 50 images to prevent storage overflow
            if (database.length > 50) {
                database = database.slice(-50);
            }

            localStorage.setItem(this.DATABASE_KEY, JSON.stringify(database));
            this.imageDatabase = database;

            console.log('Image saved to database. Total images:', database.length);

        } catch (error) {
            console.error('Error saving to database:', error);

            // If storage is full, try to clear old data
            if (error.name === 'QuotaExceededError') {
                this.clearOldImages();
                // Try saving again
                try {
                    let database = this.loadDatabase();
                    database.push(imageRecord);
                    localStorage.setItem(this.DATABASE_KEY, JSON.stringify(database));
                    this.imageDatabase = database;
                } catch (retryError) {
                    console.error('Failed to save even after clearing:', retryError);
                }
            }
        }
    }

    clearDatabase() {
        try {
            localStorage.removeItem(this.DATABASE_KEY);
            this.imageDatabase = [];
            this.showNotification('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ ·∫£nh ƒë√£ l∆∞u', 'info');
            console.log('Database cleared');
        } catch (error) {
            console.error('Error clearing database:', error);
        }
    }

    clearOldImages() {
        try {
            let database = this.loadDatabase();
            // Keep only the last 20 images
            database = database.slice(-20);
            localStorage.setItem(this.DATABASE_KEY, JSON.stringify(database));
            this.imageDatabase = database;
            console.log('Cleared old images, kept last 20');
        } catch (error) {
            console.error('Error clearing old images:', error);
        }
    }

    exportDatabase() {
        try {
            const database = this.loadDatabase();
            const dataStr = JSON.stringify(database, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });

            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `drowsiness_images_${new Date().toISOString().split('T')[0]}.json`;
            link.click();

            this.showNotification(`üìÅ ƒê√£ xu·∫•t ${database.length} ·∫£nh`, 'success');

        } catch (error) {
            console.error('Error exporting database:', error);
            this.showNotification('‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu', 'error');
        }
    }

    showImageGallery() {
            const database = this.loadDatabase();

            if (database.length === 0) {
                this.showNotification('üì∑ Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ª•p', 'info');
                return;
            }

            // Create gallery modal
            const modal = document.createElement('div');
            modal.className = 'image-gallery-modal';
            modal.innerHTML = `
            <div class="gallery-content">
                <div class="gallery-header">
                    <h3>üì∑ Th∆∞ vi·ªán ·∫£nh (${database.length} ·∫£nh)</h3>
                    <button class="close-gallery">√ó</button>
                </div>
                <div class="gallery-grid">
                    ${database.map(img => `
                        <div class="gallery-item">
                            <img src="${img.imageData}" alt="Drowsiness ${img.status}">
                            <div class="image-info">
                                <div class="time">${img.timeString}</div>
                                <div class="status ${img.status === 'Ng·ªß g·∫≠t' ? 'sleeping' : 'drowsy'}">${img.status}</div>
                                <div class="confidence">${img.confidence}%</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                <div class="gallery-actions">
                    <button class="export-btn">üìÅ Xu·∫•t d·ªØ li·ªáu</button>
                    <button class="clear-btn">üóëÔ∏è X√≥a t·∫•t c·∫£</button>
                </div>
            </div>
        `;
        
        // Add gallery styles
        if (!document.getElementById('gallery-styles')) {
            const styles = document.createElement('style');
            styles.id = 'gallery-styles';
            styles.textContent = `
                .image-gallery-modal {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.9);
                    z-index: 10000;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 20px;
                    box-sizing: border-box;
                }
                .gallery-content {
                    background: white;
                    border-radius: 10px;
                    max-width: 90vw;
                    max-height: 90vh;
                    overflow: hidden;
                    display: flex;
                    flex-direction: column;
                }
                .gallery-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px;
                    border-bottom: 1px solid #eee;
                }
                .close-gallery {
                    background: none;
                    border: none;
                    font-size: 24px;
                    cursor: pointer;
                    color: #666;
                }
                .gallery-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                    gap: 15px;
                    padding: 20px;
                    overflow-y: auto;
                    max-height: 60vh;
                }
                .gallery-item {
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    overflow: hidden;
                    background: white;
                }
                .gallery-item img {
                    width: 100%;
                    height: 150px;
                    object-fit: cover;
                }
                .image-info {
                    padding: 10px;
                    font-size: 12px;
                }
                .image-info .time {
                    color: #666;
                    margin-bottom: 5px;
                }
                .image-info .status {
                    font-weight: bold;
                    margin-bottom: 3px;
                }
                .image-info .status.sleeping {
                    color: #ff4444;
                }
                .image-info .status.drowsy {
                    color: #ff8800;
                }
                .image-info .confidence {
                    color: #888;
                    font-size: 11px;
                }
                .gallery-actions {
                    display: flex;
                    gap: 10px;
                    padding: 20px;
                    border-top: 1px solid #eee;
                }
                .gallery-actions button {
                    padding: 10px 20px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-weight: bold;
                }
                .export-btn {
                    background: #007bff;
                    color: white;
                }
                .clear-btn {
                    background: #dc3545;
                    color: white;
                }
            `;
            document.head.appendChild(styles);
        }
        
        // Add event listeners
        modal.querySelector('.close-gallery').onclick = () => modal.remove();
        modal.querySelector('.export-btn').onclick = () => {
            this.exportDatabase();
            modal.remove();
        };
        modal.querySelector('.clear-btn').onclick = () => {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ ·∫£nh?')) {
                this.clearDatabase();
                modal.remove();
            }
        };
        
        // Close on background click
        modal.onclick = (e) => {
            if (e.target === modal) modal.remove();
        };
        
        document.body.appendChild(modal);
    }
    
    showNotification(message, type = 'info') {
        try {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `demo-notification ${type}`;
            notification.textContent = message;

            // Add notification styles if not exists
            if (!document.getElementById('notification-styles')) {
                const styles = document.createElement('style');
                styles.id = 'notification-styles';
                styles.textContent = `
                    .demo-notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 15px 20px;
                        border-radius: 5px;
                        font-weight: bold;
                        z-index: 9999;
                        max-width: 300px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        animation: slideIn 0.3s ease-out;
                        font-family: Arial, sans-serif;
                        font-size: 14px;
                        line-height: 1.4;
                    }
                    .demo-notification.success {
                        background: #d4edda;
                        color: #155724;
                        border-left: 4px solid #28a745;
                    }
                    .demo-notification.error {
                        background: #f8d7da;
                        color: #721c24;
                        border-left: 4px solid #dc3545;
                    }
                    .demo-notification.warning {
                        background: #fff3cd;
                        color: #856404;
                        border-left: 4px solid #ffc107;
                    }
                    .demo-notification.info {
                        background: #d1ecf1;
                        color: #0c5460;
                        border-left: 4px solid #17a2b8;
                    }
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                `;
                document.head.appendChild(styles);
            }

            // Add to page
            document.body.appendChild(notification);

            // Auto remove after 4 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.animation = 'slideIn 0.3s ease-out reverse';
                    setTimeout(() => notification.remove(), 300);
                }
            }, 4000);

        } catch (error) {
            // Fallback to console and alert
            console.log(`${type.toUpperCase()}: ${message}`);
            if (type === 'error') {
                alert(`‚ùå ${message}`);
            }
        }
    }
    
    triggerAlert() {
        // Simple alert for demo
        if (Date.now() - this.lastDetectionTime > 3000) { // Throttle alerts
            console.log('üö® C·∫¢NH B√ÅO: Ph√°t hi·ªán ng·ªß g·∫≠t!');
            this.lastDetectionTime = Date.now();
        }
    }
}

// Initialize demo when page loads
document.addEventListener('DOMContentLoaded', () => {
    // Check if we're on the demo page (has demo elements)
    if (document.getElementById('webcam')) {
        window.drowsinessDetector = new DrowsinessDetector();
    }
});