# Script upload website l√™n Hostinger
# Ch·∫°y: .\upload-hostinger.ps1

Write-Host "üöÄ B·∫Øt ƒë·∫ßu upload website l√™n Hostinger..." -ForegroundColor Green

# Ki·ªÉm tra file c·∫•u h√¨nh
if (-not (Test-Path "ftp-config.json")) {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file ftp-config.json" -ForegroundColor Red
    Write-Host "H√£y c·∫≠p nh·∫≠t th√¥ng tin FTP trong file ftp-config.json" -ForegroundColor Yellow
    exit 1
}

# ƒê·ªçc c·∫•u h√¨nh FTP
$config = Get-Content "ftp-config.json" | ConvertFrom-Json

# Ki·ªÉm tra th√¥ng tin c·∫•u h√¨nh
if ($config.ftp_server -eq "your-ftp-server.hostinger.com") {
    Write-Host "‚ùå Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin FTP trong file ftp-config.json" -ForegroundColor Red
    Write-Host "üìã C√°ch l·∫•y th√¥ng tin FTP t·ª´ Hostinger:" -ForegroundColor Yellow
    Write-Host "1. ƒêƒÉng nh·∫≠p Hostinger Control Panel"
    Write-Host "2. V√†o Hosting > Manage > Files > FTP Accounts"
    Write-Host "3. T·∫°o ho·∫∑c xem th√¥ng tin FTP account"
    Write-Host "4. C·∫≠p nh·∫≠t th√¥ng tin v√†o ftp-config.json"
    exit 1
}

# T·∫°o danh s√°ch file c·∫ßn upload
$files = @(
    "index.html",
    "styles.css", 
    "script.js",
    "CNAME"
)

$folders = @(
    "html5up-miniport"
)

# Upload function
function Upload-File {
    param([string]$LocalFile, [string]$RemoteFile)
    
    try {
        $ftpRequest = [System.Net.FtpWebRequest]::Create("ftp://$($config.ftp_server)$($config.ftp_path)$RemoteFile")
        $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile
        $ftpRequest.Credentials = New-Object System.Net.NetworkCredential($config.ftp_username, $config.ftp_password)
        $ftpRequest.UsePassive = $true
        $ftpRequest.UseBinary = $true
        $ftpRequest.KeepAlive = $false
        
        $fileContents = [System.IO.File]::ReadAllBytes($LocalFile)
        $ftpStream = $ftpRequest.GetRequestStream()
        $ftpStream.Write($fileContents, 0, $fileContents.Length)
        $ftpStream.Close()
        
        Write-Host "‚úÖ $LocalFile" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå $LocalFile - $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Upload files
Write-Host "üì§ ƒêang upload files..." -ForegroundColor Yellow
foreach ($file in $files) {
    if (Test-Path $file) {
        Upload-File $file $file
    } else {
        Write-Host "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: $file" -ForegroundColor Yellow
    }
}

# Upload folders (simplified)
Write-Host "üì§ ƒêang upload folders..." -ForegroundColor Yellow
foreach ($folder in $folders) {
    if (Test-Path $folder) {
        Write-Host "üìÅ Uploading $folder..." -ForegroundColor Cyan
        # Upload t·∫•t c·∫£ file trong th∆∞ m·ª•c
        $allFiles = Get-ChildItem -Path $folder -Recurse -File
        foreach ($file in $allFiles) {
            $relativePath = $file.FullName.Substring((Get-Location).Path.Length + 1)
            $remotePath = $relativePath.Replace("\", "/")
            Upload-File $file.FullName $remotePath
        }
    } else {
        Write-Host "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: $folder" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üéâ Ho√†n th√†nh upload!" -ForegroundColor Green
Write-Host "üåê Website: https://jkhoa.dev" -ForegroundColor Cyan
Write-Host "‚è≥ Ch·ªù 5-10 ph√∫t ƒë·ªÉ website ho·∫°t ƒë·ªông" -ForegroundColor Yellow 